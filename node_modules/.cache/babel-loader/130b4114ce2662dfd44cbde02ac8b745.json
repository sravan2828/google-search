{"ast":null,"code":"var _jsxFileName = \"/Users/sravan/Desktop/giphy-search/src/containers/SearchResults/SearchResults.js\";\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport ImageList from '../../components/ImageList';\nimport ImageBox from '../../components/ImageBox';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport prepareImages from \"../../utils\";\n\nclass SearchResults extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      images: [],\n      offset: 0\n    };\n\n    this.fetchGifs = () => {\n      const text = this.props.text;\n      const apiUrl = \"https://app.zenserp.com/api/v2/search?q=\".concat(text, \"&hl=en&gl=US&location=United%20States&search_engine=google.com&tbm=isch&num=20&apikey=2b20eb80-aad7-11e9-a80b-f5d42510bbba\");\n      fetch(apiUrl).then(response => {\n        if (!response.ok) {\n          throw new Error('No ok response from API');\n        }\n\n        console.log(response.json);\n        return response.json();\n      }).then(({\n        data\n      }) => {\n        this.setState({\n          images: data.image_results.map(prepareImages)\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchGifs();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.text !== prevProps.text) // Check if it's a new user, you can also use some unique property, like the ID  (this.props.user.id !== prevProps.user.id)\n      {\n        _.debounce(this.fetchGifs, 1200, {\n          leading: true\n        })();\n\n        this.setState({\n          offset: 0,\n          images: []\n        });\n      }\n  }\n\n  render() {\n    return React.createElement(InfiniteScroll, {\n      dataLength: this.state.images.length,\n      loader: this.props.text ? React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Loading...\") : React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"please enter text to search\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(ImageList, {\n      images: this.state.images,\n      renderImage: ImageBox,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default SearchResults;","map":{"version":3,"sources":["/Users/sravan/Desktop/giphy-search/src/containers/SearchResults/SearchResults.js"],"names":["React","Component","_","ImageList","ImageBox","InfiniteScroll","prepareImages","SearchResults","state","images","offset","fetchGifs","text","props","apiUrl","fetch","then","response","ok","Error","console","log","json","data","setState","image_results","map","catch","error","componentDidMount","componentDidUpdate","prevProps","debounce","leading","render","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,aAAP,MAA0B,aAA1B;;AACA,MAAMC,aAAN,SAA4BN,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAErCO,KAFqC,GAE7B;AACPC,MAAAA,MAAM,EAAE,EADD;AAEPC,MAAAA,MAAM,EAAE;AAFD,KAF6B;;AAAA,SAmBrCC,SAnBqC,GAmBzB,MAAM;AAAA,YACVC,IADU,GACF,KAAKC,KADH,CACVD,IADU;AAEjB,YAAME,MAAM,qDACgCF,IADhC,+HAAZ;AAEAG,MAAAA,KAAK,CAACD,MAAD,CAAL,CACEE,IADF,CACOC,QAAQ,IAAI;AACjB,YAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACjB,gBAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACA;;AACDC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACK,IAArB;AACA,eAAOL,QAAQ,CAACK,IAAT,EAAP;AAEA,OARF,EASEN,IATF,CASO,CAAC;AAAEO,QAAAA;AAAF,OAAD,KAAc;AAClB,aAAKC,QAAL,CAAc;AACbf,UAAAA,MAAM,EAAEc,IAAI,CAACE,aAAL,CAAmBC,GAAnB,CAAuBpB,aAAvB;AADK,SAAd;AAGD,OAbF,EAcEqB,KAdF,CAcQC,KAAK,IAAI;AACfR,QAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA,OAhBF;AAiBA,KAxCoC;AAAA;;AAOrCC,EAAAA,iBAAiB,GAAG;AACnB,SAAKlB,SAAL;AACA;;AAEDmB,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC7B,QAAG,KAAKlB,KAAL,CAAWD,IAAX,KAAoBmB,SAAS,CAACnB,IAAjC,EAAuC;AACvC;AACCV,QAAAA,CAAC,CAAC8B,QAAF,CAAW,KAAKrB,SAAhB,EAA2B,IAA3B,EAAiC;AAACsB,UAAAA,OAAO,EAAE;AAAV,SAAjC;;AACA,aAAKT,QAAL,CAAc;AAACd,UAAAA,MAAM,EAAE,CAAT;AAAYD,UAAAA,MAAM,EAAE;AAApB,SAAd;AACA;AACD;;AAyBDyB,EAAAA,MAAM,GAAG;AACR,WAAO,oBAAC,cAAD;AACC,MAAA,UAAU,EAAE,KAAK1B,KAAL,CAAWC,MAAX,CAAkB0B,MAD/B;AAEC,MAAA,MAAM,EAAE,KAAKtB,KAAL,CAAWD,IAAX,GAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAlB,GAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAFhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIC,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWC,MAA9B;AAAsC,MAAA,WAAW,EAAEL,QAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJD,CAAP;AAOA;;AAlDoC;;AAqDtC,eAAeG,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport _ from 'lodash';\nimport ImageList from '../../components/ImageList';\nimport ImageBox from '../../components/ImageBox';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport prepareImages from \"../../utils\";\nclass SearchResults extends Component {\n\n\tstate = {\n\t\timages: [],\n\t\toffset: 0\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.fetchGifs();\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif(this.props.text !== prevProps.text) // Check if it's a new user, you can also use some unique property, like the ID  (this.props.user.id !== prevProps.user.id)\n\t\t{\n\t\t\t_.debounce(this.fetchGifs, 1200, {leading: true})();\n\t\t\tthis.setState({offset: 0, images: []});\n\t\t}\n\t} \n\n\tfetchGifs = () => {\n\t\tconst {text} = this.props;\n\t\tconst apiUrl =\n\t\t\t`https://app.zenserp.com/api/v2/search?q=${text}&hl=en&gl=US&location=United%20States&search_engine=google.com&tbm=isch&num=20&apikey=2b20eb80-aad7-11e9-a80b-f5d42510bbba`\n\t\tfetch(apiUrl)\n\t\t\t.then(response => {\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow new Error('No ok response from API');\n\t\t\t\t}\n\t\t\t\tconsole.log(response.json);\n\t\t\t\treturn response.json();\n\n\t\t\t})\n\t\t\t.then(({ data }) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\timages: data.image_results.map(prepareImages)\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t}\n\n\trender() {\n\t\treturn <InfiniteScroll\n          dataLength={this.state.images.length}\n          loader={this.props.text ? <h4>Loading...</h4>: <h4>please enter text to search</h4>}\n        >\n          <ImageList images={this.state.images} renderImage={ImageBox} />\n        </InfiniteScroll>\n\t\t ;\n\t}\n}\n\nexport default SearchResults;\n"]},"metadata":{},"sourceType":"module"}